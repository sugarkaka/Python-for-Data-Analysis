# Python-for-Data-Analysis

# DataFrame object using padas.read_table
import pandas as pd

unames = ['user_id', 'gender', 'age', 'occupation', 'zip'] 
users = pd.read_table('ml-1m/users.dat', sep='::', header=None,
names=unames, engine = 'python')

rnames = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_table('ml-1m/ratings.dat', sep='::', header=None,
names=rnames)

mnames = ['movie_id', 'title', 'genres']
movies = pd.read_table('ml-1m/movies.dat', sep='::', header=None,
names=mnames)

# You can verify that everything succeeded by looing at the first few rows
users[:5]
ratings[:5]
movies[:5]

# Merge ratings with users then merging that result with the movies 
data = pd.merge(pd.merge(ratings, users), movies)
data
data.ix[0]

# To get mean movie ratings for each film group by gender with pivot_table
mean_ratings = data.piovt_table('rating', index = 'title', columns = 'gender', aggfunc = 'mean')
mean_ratings[:5]

# Filter down to movies that received at least 250 ratings group by tile 
ratings_by_title = data.groupby('title').size()
rating_by_title[:10]
active_titles = ratings_by_title.index[ratings_by_title >= 250]
active_titles

# Receiving at least 250 ratings mean_ratings
mean_ratings = mean_ratings.ix[active_titles]
mean_ratings

# See the top films among female viewers
top_female_ratings = mean_ratings.sort_index(by = 'F', ascending = False)
top_female_ratings[:10]

# Add a column to mean_ratings containing the differences in means
mean_ratings['diff'] = mean_ratings['M'] - mean_ratings['F']
sorted_by_diff = mean_ratings.sort_index(by = 'diff', ascending = False)
sorted_by_diff[:15]

# Reverse order of rows, take first 15 rows
sorted_diff[::-1,][:15]

# Standrad deviation of rating grouped by title
rating_std_by_title = data.groupby('title')['rating'].std()
rating_std_by_title = rating_std_by_title,ix[active_titles]
rating_std_by_title.order(ascending = False)[:10]
