# import pandas and load name 1880
import pandas as pd
import numpy as np
names1880 = pd.read_csv('yob1880.txt', names = ['name', 'sex', 'births'])
names1880

# use the sum of the births column by sex as the total number of births in 1880
names1880.groupby('sex').births.sum()

# use pandas.concat to assenble all of the data into a single dataframe
years = range(1880, 2011)
pieces = []
columns = ['name', 'sex', 'births']
for year in years:
   path = 'yob%d.txt' % year
   frame = pd.read_csv(path, names = columns)
   
   fram['year'] = year
   pieces.append(frame)
names = pd.concat(pieces. ignore_index = True)
names

# start aggregating the data at the year and sex level using groupby and pivot_table
total_births = names.pivot_table('birth', index = 'year', columns = 'sex', aggfunc= sum)
total_births.tail()
total_births.plot(title = 'Total births by sex and year')

# insert column prop with the fraction of babies
def add_prop(group):
    # Integer division floors
    births = group.births.astype(float)
    group['prop'] = births / births.sum()
    return group
names = names.groupby(['year', 'sex']).apply(add_prop)

# use np.allclose to check that 
np.allclose(names.groupby('year', 'sex']).prop.sum(), 1)
    
# analysis the top 1000 names for each sex and year combintination
def top1000(group):
    return group.sort_index(by = 'births', ascending = False)[:1000]
    grouped = names.groupby(['year', 'sex'])
    top1000 = grouped.apply(get_top1000)

pieces = []
for year, group in names.groupby(['year', 'sex']):
    pieces.append(group.sort_index(by = 'births', assending = False)[:1000])
top1000 = pd.concat(pieces, ignore_index = True)

# Spilt the top 1000 names into the boy and the girl portions
boys = top1000[top1000.sex == 'M']
girls = top1000[top1000.sex == 'F']

# Form a pivot table of the total number of births by year and sex 
total_births = top1000.pivot_table('births', index = 'year', columns = 'sex', aggfunc = sum)
total_births

# Plot for the handful of names 
subset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]
subset.plot(subplots = True, figsize = (12, 10). grid = False, title = 'Number of births per year')

# The proportion of births represented by the top 1000 most popular names 
table = top1000.pivot_table('prop', index = 'year', columns = 'sex', aggfunc = sum)
table.plot(title = 'Sum of the table1000/prop by year and sex', yticks = np.linspace(0,1.2, 13), xticks = range(1880, 2020, 10))

df = boys[ boys.year == 2010]
df

# Return th position in the cumulative sum at which 0.5 would need to be inserted 
prop_cumsum= df.sort_index(by = 'prop', ascending = False).prop.cumsum()
prop_cumsum[:10]
prop_cumsum.searchsorted(0.5)

# Apply this operation to each year and sex combination
def get_quantile_count(group, q = 0.5):
    group = group.sort_index(by = 'prop', ascending = False)
    return group.prop.cumsum().searchsorted(q) + 1
diversity = top1000.groupby(['year', 'sex']).apply(get_quantile_count)
diversity = diversity.unstack('sex')
diversity.head()

# Plot the diversity
diversity.plot(title = 'Numberof popular names in top 50%)

# Extract the last letter from the name colunmn
get_last_letter = lambda x: x[-1]
last_letters = names.name.map(get_last_letter)
last_letters.name = 'last_letter'

table = names.pivot_table('births', index = last_letters, column = ['year', 'sex'], aggfunc = sum)

# Select the three representative years spanning the history and print the first few rows
subtable = table.reindex(columns = [1910, 1960, 2010], level = 'year')
subtable.head()
subtable.sum()
letter_prop = subtable / subtable.sum().astype(float)

# Make bar plots for each sex broken down by year
import matplotlib.pyplot as plt
fig, axes = plt.subplots(2, 1, figsize = (10, 8))
letter_prop['M'].plpt(kind = 'bar', rot = 0, ax = axes[0],title = 'Male')
letter_prop['F'].plot(kind = 'bar', rot = 0, ax = axes[1], title = 'Female', legend = False)

# Transposing to make each column a time series:
letterL_prop = table / table.sum().astype(float)
dny_ts = letter_prop.ix[['d', 'n', 'y'], 'M'].T
dny_ts.head()
dny_ts.plot()

# Compute a list of names occurring in the dataset starting with  lesl
all_names = top1000.name.unique()
mask = np.array(['lesl'in x.lower() for x in all_names])
lesley_like = all_name[mask]
lesley_like
array([Leslie, Lesley, Leslee, Lesli, Lesly], dtype = object)

# From here filter down to just those names and sum births grouped by name to see the relative frequencies
filtered = top1000[top1000.name.isin(lesley_like)]
filtered.gropby('name').births.sum()

# Aggregate by sex and year and normalize within year

table = filtered.pivot_table('births', index = 'year', columns = 'sex', aggfunc = 'sum')
table = table.div(table.sum(1), axis = 0)
table.tail()
table.plot(style= {'M':'k-', 'F': 'k--'})


