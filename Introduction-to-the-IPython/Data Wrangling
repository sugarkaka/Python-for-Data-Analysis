df1 = DataFrame({
    'key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'],
	'data1': range(7)})

df2 = DataFrame({
    'key': ['a', 'b', 'd'],
	'data2': range(3)})
	
pd.merge(df1, df2)
pd.merge(df1, df2, on = 'key')
pd.merge(df1, df2, how = 'outer')

pd.merge(df1, df2, on = 'key', how = 'left')

# 多个键进行合并
pd.merge(df1, df2, on = ['key1', 'key2'], how = 'outer')

# 重复列名的处理
pd.merge(left, right, on = 'key1', suffixes = ('_left', '_right'))

# 连接键位于索引中
left1 = DataFrame({
    'key1': ['a', 'b', 'a', 'a', 'b', 'c'],
	'value': range(6)})

right1 = DataFrame({
    'group_val': [3.5, 7]},
	index = ['a', 'b'])

pd.merge(left1, right1, left_on = 'key', right_index = True)

pd.merge(left1, right1, left_on = 'key', right_index = True, how = 'outer')

left1.join(right1, on = 'key', how = 'outer')


# concat 合并
s1 = Series([0, 1], index = ['a', 'b'])
s2 = Series([2, 3, 4], index = ['c', 'd', 'e'])
s3 = Series([5, 6], index = ['f', 'g'])
pd.concat([s1, s2, s3])
pd.concat([s1, s2], axis = 1)
pd.concat([s1, s2], axis = 1, join = 'inner')
pd.concat([s1, s2], axis = 1, join_axes = [['a', 'b', 'c', 'd']])

# 创建层次化索引
result = pd.concat([s1, s2], keys = ['one, 'two', 'three'])
result = pd.concat([s1, s2], keys = ['one, 'two', 'three'], names = ['upper', 'lower'])

# 合并重叠数据
np.where(pd.isnull(a), b, a)

b[:-2].combine_first(a:[2:])

# 重塑层次化索引

data = DataFrame(np.arange(6).reshape(2, 3),
    index = pd.Index(['Ohio', 'Colorado'], name = 'state'),
	columns = pd.Index(['one', 'two', 'three'], name = 'number'))
	

data = DataFrame(
    np.arange(6).reshape(2, 3),
    index = ['Ohio', 'Colorado'], 
	columns = ['one', 'two', 'three'])
data.index.name = 'state'
data.columns.name = 'number'

data.stack()
data.stack().unstack()

# 长格式转换为宽格式
pivoted = ldata.pivot('date', 'item', 'value')
pivoted.head()

pivoted = ldata.set_index(['date', 'item']).unstack('item')

# 移除重复数据
data = DataFrame({
    'k1': ['one'] *3 + ['two'] *4,
	'k2': [1, 1, 2, 3, 3, 4, 4]})
	
data.drop_duplicates()
data.drop_duplicates(['k1'])

# 保留最后一个值
data.drop_duplicates(['k1'], take_last = True)

# 利用函数或映射进行数据转换
data = DataFrame({
    'food': ['bacon', 'pulled pork', 'bacon', 'Pastrami', 'corned beef',
	        'Bacon', 'pastrami', 'honey ham', 'nova lox']
	'ounces': [4, 3, 12, 6, 7, 8, 3, 5, 6]})	
meat_to_animal = {
    'bacon': 'pig',
	'pulled pork': 'pig',
	'pastrami': 'cow',
	'corned beef': 'cow',
	'honey ham': 'pig', 
	'nova lox': 'salmon'
	}

data['animal'] = data['food'].map(str.lower).map(meat_to_animal)	
	
data['food'].map(lambda x: meat_to_animal[x.lower()])
# 今天去看小宝宝
# 跷脚牛肉休假
