from pandas import Series, DataFrame
import pandas as pd
obj = Series([4, 7, -5, 3])
obj.values
obj.index

obj2 = Series([4, 7, -5, 3], index = ['d', 'c', 'b', 'a'])
obj2.index

sdata = {'oloh':35000, 'texas': 70000, 'oregon': 98000}
obj = Series(sdata)
obj

pd.isnull(obj)
pd.notnull(obj)
obj.isnull()

data = {
    'state': ['ohio', 'ohio', 'ohio', 'nevada', 'nevada'],
	'year': [2000, 2001, 2002, 2001, 2002],
	'pop': [1.5, 1.7, 3.6, 2.4, 2.9]
	}
frame = DataFrame(data)

DataFrame(data, columns = ['year', 'state', 'pop'])
frame['year']
frame.year

frame.ix[3]
frame['debt'] = 13

# 嵌套字典
pop = {
    'nevada': {2001: 2.4, 2002: 2.9},
	'nevada': {2003: 3.4, 2004: 3.9},
    'ohio': {2001: 2.3, 2002: 3.9}
	}
frame1 = DataFrame(pop)

# 设置index 和 columns 的name
frame.index.name = 'year'
frame.columns.name = 'state'

# 索引对象
obj = Series(range(3), index = ['a', 'b', 'c'])
index = obj.index
index
index[1:]

index = pd.Index(np.arange(3))
obj2= Series([1.5, -2.5, 0], index = index)
obj2.index is index 

# 重新索引
obj1 = Series([4.5, 7.2, -5.3, 3.6], index = ['d', 'b', 'c', 'a'])
obj1

obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])
obj2

obj3 = obj.reindex(['a', 'b', 'c', 'd', 'e'], fill_value = 0)
obj3

# 插值处理
obj4 = Series(['blue', 'purple', 'yellow'], index = [0, 2, 4])
obj4 = reindex(range(6), method = 'ffill')
obj4 = reindex(range(6), method = 'bfill')

frame = DataFrame(np.arange(9).reshape((3, 3)), index = ['a', 'c', 'd'], columns = ['ohio', 'texas', 'nevada'])
frame
frame2 = frame.reindex(['a', 'b', 'c', 'd'])

# 丢弃指定轴上的项
obj = Series(np.arange(5.), index = ['a', 'b', 'c', 'd', 'e'])
obj1 = obj.drop('c')
obj1

# axis 赋值为0或1,0为行，1为列
data = DataFrame(np.arange(16).reshape((4, 4)), index = ['a', 'b', 'c','d'], columns = ['ohio', 'texas', 'nevada', 'newyork'])
data.drop('texas', axis = 1)

# 在行上索引
data.ix['colorado', ['two', 'three']]
data.ix[['colorado', 'utah'], [3, 0, 1]]
data.ix[2]

# 算数功能和数据对齐
s1 = Series([7.3, -2.5, 3.4], index = ['a', 'b', 'c'])
s2 = Series([4.3, -4.5, 4.4], index = ['b', 'd', 'c'])
s1 + s2

# 对于DateFrame相加会同时发生在行列上

df1.add(df2, fill_value = 0)

df1.reindex(columns = df2.columns, fill_value = 0)

frame = DataFrame(np.arange(12).reshape((4, 3)), 
    columns = list('bde'), index = ['Utah', 'Ohio', 'Taxas', 'Oregon'])

# 函数的应用与映射
f = lambda x : x.max() - x.min()

frame.apply(f)
frame.apply(f, axis = 1)

def f(x):
    return Series([x.max(), x.min(), index = ['max', 'min'])
frame.apply(f)

format = lambda x: '%.2f' % x
frame.applymap(format)

frame['e'].map(format)

# 排序和排名
obj = Series(range(4), index = ['d', 'a', 'b', 'c'])
obj.sort_index()
obj.order()

frame = DataFrame(np.arange(8).reshape((2, 4)), index = ['three', 'one'], columns = ['d', 'a', 'b', 'c'])
frame.sort_index
frame.sort_index(axis = 1)
frame.sort_index(axis = 1, ascending = False)

obj = Series([7, -5, 7, 4, 2, 0, 4])
obj.rank

# 利用method 破坏评级关系
obj.rank(method = 'first')
obj.rank(ascending = False, method = 'max')

# 带有重复值的轴索引
obj = Series(range(5), index = ['a', 'a', 'b', 'b', 'c'])
obj

obj.index.is_unique

frame = DataFrame(np.arange(12).reshape((4, 3)), 
    columns = list('bde'), index = ['Utah', 'Ohio', 'Taxas', 'Oregon'])
frame.describe()
frame.sum()
frame.sum(axis = 1)

all_data = {}
for ticker in ['APPL', 'IBM', 'MSFT', 'GOOG']:
    all_data[ticker] = web.get_data_yahoo(ticker, '1/1/2000', '1/1/2010')
	
price = DataFrame({tic: data['Adj Close']
                    for tic, data in all_data.iteritems()})
volume = DataFrame({tic: data['Volume']
                    for tic, data in all_data.iteritems()})

# Series计算相关系数与协方差
returns.MSFT.corr(returns.IBM)					
returns.MSFT.cov(returns.IBM)

# DataFrame计算相关系数与协方差
returns.corr()
returns.cov()

returns.corrwith(returns.IBM)
returns.corrwith(volume)

# 唯一值，值计算以及成员资格
uniques = obj.unique()
uniques_sort = obj.unique_sort()

obj.value_counts()
pd.value_counts(obj.values, sort = False)

# 判断成员资格
mask = obj.isin(['b', 'c'])
mask 
obj[mask]

result.apply(pd.value_counts).fillna(0)

# 处理缺失数据
string_data = Series(['aardvark', 'artichoke', np.nan, 'avocado'])
string_data
string_data.isnull()

string_data[0] = None
string_data.isnull()

