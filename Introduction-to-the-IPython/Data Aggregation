df = DataFrame({
    'key1':['a', 'a', 'b', 'b', 'a'],
	'key2':['one', 'two', 'one', 'two', 'one']
	'data1': np.random.randn(5)
	'data2': np.random.randn(5)})
grouped = df['data1'].groupby(df['key1'])
grouped.mean()

means = df['data1'].groupby([df['key1'], df['key2']]).mean()
df.groupby('key1')['data1']
df['data1'].groupby(df['key1'])

# 为DF添加平均值列
k1_means = df.groupby('key1').mean().add_prefix('mean_')
k1_means
pd.merge(df, k1_means, left_on = 'key1', right_index = True)

key = ['one', 'two', 'one', 'two', 'one']
df.groupby(key).mean()
df.groupby(key).transform(np.mean)

# 删掉平均值列
def demean(arr):
    return arr - arr.mean()
demeaned = df.groupby(key).transform(demean)

frame = DataFrame({
    'data1': np.random.randn(1000),
	'data2': np.random.randn(1000)})
factor = pd.cut(frame.data1, 4)
def get_stats(group):
    return {
	'min': group.min(),'max': group.max(),
	'count': group.count(), 'mean': group.mean()}
grouped = frame.data2.groupby(factor)
grouped.apply(get_stats).unstack

# 使用平均数填充缺失值
s = Series(np.random.randn(6))
s[::2] = np.nan
s.fillna(s.mean())

data.groupby(group_key).mean()
fill_mean = lambda g: g.fillna(g.mean())
data.groupby(group_key).apply(fill_mean)

fill_values = {'east': 0.5, 'west': -1}
fill_func = lambda g: g.fillna(fill_values[g.name])
data.groupby(group_key).apply(fill_func)

# 21点
suits = ['H', 'S', 'C', 'D']
card_val = (range(1, 11) + [10] * 3 ) * 4
base_names = ['A'] + range(2, 11) + ['J', 'Q' 'K']
cards = []
for suit in suits:
    cards.extend(str(num) + suit for num in base_names)

deck = Series(card_val, index = cards)

def draw(deck, n = 5):
    return deck.take(np.random.permutation(len(deck))[:n])

draw(deck)

get_suit = lambda card: card[-1]
deck.groupby(get_suit).apply(draw, n = 2)

df = DataFrame({
    'key1':['a', 'b', 'a', 'b','a'],
    'key2':['one', 'two', 'one', 'two', 'one'],
    'data1': np.random.randn(5),
    'data2': np.random.randn(5)})
groupedd = df['data1'].groupby(df['key1'])
groupedd.mean()	
grouped['data1'].quantile(0.9)
	
means = df['data1'].groupby([df['key1'], df['key2']]).mean()
means

columns = pd.MultiIndex.from_arrays(
    [['US', 'US', 'US', 'JP', 'JP'],
	[1, 3, 5, 1, 3]],names = ['cty', 'tenor'])
hier_df = DataFrame(np.random.randn(4, 5), columns = columns)
